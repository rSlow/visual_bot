from typing import Optional

from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup

from bot import dp, bot
from functools import wraps
from FSM import Admin
from schemas import Queue
from keyboards import cancel_kb


def admin_required(func):
    @wraps(func)
    def inner(message, *args, **kwargs):
        if message.from_user.id not in bot.admins:
            from .z_delete import delete
            return delete(message=message)
        else:
            return func(message, *args, **kwargs)

    return inner


@dp.message_handler(Text(contains="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å"))
@admin_required
async def get_queue_element(message: Message, state: FSMContext):
    bot.queue = Queue.from_database()
    await Admin.start.set()
    post_id, post = bot.queue.get_first()
    if post_id:
        post = bot.queue.get_post_by_id(post_id=post_id)
        async with state.proxy() as proxy:
            proxy["current_post_id"] = post_id
            proxy["post_backup"] = post
        kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        await bot.send_post_for_confirm(post, chat_id=message.from_user.id, reply_markup=kb)
    else:
        from handlers.mains import main_menu
        await main_menu(message=message, state=state, text="–ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç.")


@dp.message_handler(Text(contains="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"), state=Admin.start)
async def post_confirm(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id)
    await bot.publish_post(post)
    bot.queue.delete_by_id(post_id=post_id)
    await message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await get_queue_element(message=message, state=state)


@dp.message_handler(Text(contains="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"), state=Admin.start)
async def post_decline(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    bot.queue.delete_by_id(post_id=post_id)
    await message.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await get_queue_element(message=message, state=state)


@dp.message_handler(Text(contains="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), state=Admin.start)
async def edit_post(message: Message, state: FSMContext, text: Optional[str] = None):
    if not text:
        text = "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?"

    await Admin.edit.set()
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]

    post = bot.queue.get_post_by_id(post_id=post_id)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add("–ö–∞–º–µ—Ä–∞", "–ú–µ—Å—Ç–æ", "–û–±—Ä–∞–±–æ—Ç–∫–∞")
    kb.add(*[f"–§–æ—Ç–æ ‚Ññ{i + 1} üóë" for i in range(len(post.image_ids))])
    kb.add("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ", "–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ‚õî")
    await message.answer(text, reply_markup=kb)


@dp.message_handler(Text(contains="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), state=Admin.edit)
async def save_post(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id=post_id)
    post.update()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await get_queue_element(message=message, state=state)


@dp.message_handler(Text(contains="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å"), state=Admin.edit)
async def decline_edits_post(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
        backup_post = proxy["post_backup"]
        bot.queue[post_id] = backup_post
    await get_queue_element(message=message, state=state)


@dp.message_handler(Text(contains="–û—Ç–º–µ–Ω–∏—Ç—å"), state=(Admin.edit_method, Admin.edit_place, Admin.edit_device))
async def cancel_edit_fields(message: Message, state: FSMContext):
    await edit_post(message=message, state=state, text="–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")


@dp.message_handler(Text(contains="–ö–∞–º–µ—Ä–∞"), state=Admin.edit)
async def edit_post_device(message: Message):
    await Admin.edit_device.set()
    await message.answer("–ù–æ–≤–∞—è –∫–∞–º–µ—Ä–∞:",
                         reply_markup=cancel_kb)


@dp.message_handler(state=Admin.edit_device)
async def edit_post_device_confirm(message: Message, state: FSMContext):
    device = message.text.strip()
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id=post_id)
    post.device = device
    await edit_post(message=message, state=state, text="–ù–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


@dp.message_handler(Text(contains="–ú–µ—Å—Ç–æ"), state=Admin.edit)
async def edit_post_device(message: Message):
    await Admin.edit_place.set()
    await message.answer("–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏:",
                         reply_markup=cancel_kb)


@dp.message_handler(state=Admin.edit_place)
async def edit_post_device_confirm(message: Message, state: FSMContext):
    place = message.text.strip()
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id=post_id)
    post.place = place
    await edit_post(message=message, state=state, text="–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


@dp.message_handler(Text(contains="–û–±—Ä–∞–±–æ—Ç–∫–∞"), state=Admin.edit)
async def edit_post_device(message: Message):
    await Admin.edit_method.set()
    await message.answer("–ù–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                         reply_markup=cancel_kb)


@dp.message_handler(state=Admin.edit_method)
async def edit_post_device_confirm(message: Message, state: FSMContext):
    photo_editing = message.text.strip()
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id=post_id)
    post.photo_editing = photo_editing
    await edit_post(message=message, state=state, text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.")


@dp.message_handler(regexp=r"–§–æ—Ç–æ ‚Ññ\d{1,2}.*", state=Admin.edit)
async def delete_photo(message: Message, state: FSMContext):
    photo_num = int(message.text.split()[1].replace("‚Ññ", "").strip())
    async with state.proxy() as proxy:
        post_id = proxy["current_post_id"]
    post = bot.queue.get_post_by_id(post_id=post_id)
    if len(post.image_ids) == 1:
        return await edit_post(message=message, state=state, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    post.delete_photo(photo_num)
    await edit_post(message=message, state=state, text=f"–§–æ—Ç–æ ‚Ññ{photo_num} —É–¥–∞–ª–µ–Ω–æ.")
