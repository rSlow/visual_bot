from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import Message, ContentType

from FSM import AddPost
from bot import bot
from bot import dp
from keyboards import cancel_kb, confirm_kb, photo_edit_kb, photo_kb
from orm import QueuePost
from schemas import Post
from .mains import main_menu


@dp.message_handler(Text(contains="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ"))
async def add_photos(message: Message, state: FSMContext):
    await AddPost.photo.set()
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ (<u>–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º!</u>) üéë\n"
                         "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞.\n"
                         "–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ - <u>–Ω–∞–∂–∏–º–∞–µ–º –≤–Ω–∏–∑—É –∫–Ω–æ–ø–æ—á–∫—É <b>–î–∞–ª–µ–µ</b></u> "
                         "(–æ–Ω–∞ –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å—Å—è - —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏ üéõ –≤–Ω–∏–∑—É...)",
                         reply_markup=photo_kb)
    async with state.proxy() as proxy:
        proxy["post_schema"] = Post(message.from_user.id, message.from_user.mention)


@dp.message_handler(content_types=ContentType.PHOTO, state=AddPost.photo)
async def append_photo(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["post_schema"].image_ids.append(message.photo[-1].file_id)
    await message.delete()


@dp.message_handler(Text(contains="–î–∞–ª–µ–µ"), state=AddPost.photo)
async def confirm_photos_download(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        count_photos = len(proxy['post_schema'].image_ids)
        if not count_photos:
            await message.answer(text="–ù–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ! –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫ üòå")
            await add_photos(message, state)
        else:
            await AddPost.next()
            await message.delete()
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count_photos} —Ñ–æ—Ç–æ!\n"
                                 "–ù–∞ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ñ–æ—Ç–æ? üì∑",
                                 reply_markup=cancel_kb)


@dp.message_handler(state=AddPost.device)
async def add_shooting_method(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["post_schema"].device = message.text.strip()
    await message.delete()
    await AddPost.next()
    await message.answer("–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.\n"
                         "–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - "
                         "–∂–¥–µ–º –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üòä\n"
                         "–ê –µ—Å–ª–∏ –Ω–µ—Ç - –∫–Ω–æ–ø–æ—á–∫–∞ –≤–Ω–∏–∑—É...",
                         reply_markup=photo_edit_kb)


@dp.message_handler(state=AddPost.photo_editing)
async def add_photo_processing(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        if ~message.text.find("–§–æ—Ç–æ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
            proxy["post_schema"].photo_editing = None
        else:
            proxy["post_schema"].photo_editing = message.text.strip()
    await message.delete()
    await AddPost.next()
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ—Å—Ç–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Å–∏–π –∫–∞–¥—Ä?",
                         reply_markup=cancel_kb)


@dp.message_handler(state=AddPost.place)
async def add_place(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["post_schema"].place = message.text.strip()
        post: Post = proxy["post_schema"]
    await message.delete()
    if not message.text.strip():
        await message.answer("–ù—É –Ω–µ–µ–µ—Ç, –≥–æ—Ä–æ–¥ —É–∂–µ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å üò¢",
                             reply_markup=cancel_kb)
    else:
        await AddPost.next()
        desc_message = await message.answer("–û—Ç–ª–∏—á–Ω–æ. –ü–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:")
        media_messages = await bot.send_post(post=post, chat_id=message.from_user.id)
        confirm_message = await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º?",
                                               reply_markup=confirm_kb)
        async with state.proxy() as proxy:
            proxy["confirm_messages"] = [desc_message, *media_messages, confirm_message]


@dp.message_handler(Text(contains="–î–∞"), state=AddPost.confirm)
@dp.message_handler(Text(contains="–ù–µ—Ç"), state=AddPost.confirm)
async def confirm(message: Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as proxy:
        for confirm_message in proxy["confirm_messages"]:
            await confirm_message.delete()
        post: Post = proxy["post_schema"]
    if ~message.text.find("–î–∞"):
        text = "–ü–æ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
        await QueuePost.add_post(post)
        await main_menu(message=message, state=state, text=text + "\n–ß—Ç–æ –Ω–∏–±—É–¥—å –µ—â–µ?")
        await bot.send_message(chat_id=bot.admins[0], text="–í –ø—Ä–µ–¥–ª–æ–∂–∫—É –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç...")
    elif ~message.text.find("–ù–µ—Ç"):
        await main_menu(message=message, state=state, text="–û—Ç–º–µ–Ω—è–µ–º...")
    else:
        from handlers.z_delete import delete
        await delete(message)
