from aiogram.types import Message, ContentType
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters import Text
from FSM import AddPost
from bot import dp
from keyboards import cancel_kb, confirm_kb
from .mains import main_menu
from orm_sql.models import QueuePost
from schemas import PostSchema


@dp.message_handler(Text(contains="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ"))
async def add_photo(message: Message, state: FSMContext):
    await AddPost.next()
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Ñ–æ—Ç–æ (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º!) üéë",
                         reply_markup=cancel_kb)
    async with state.proxy() as proxy:
        proxy["add_post"] = PostSchema(message.from_user.id)


@dp.message_handler(content_types=ContentType.PHOTO, state=AddPost.photo)
async def add_shooting_method(message: Message, state: FSMContext):
    await AddPost.next()
    async with state.proxy() as proxy:
        proxy["add_post"].image_id = message.photo[0].file_id
    await message.delete()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ñ–æ—Ç–æ? üì∑",
                         reply_markup=cancel_kb)


@dp.message_handler(state=AddPost.device)
async def add_shooting_method(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["add_post"].device = message.text.strip()
    await message.delete()
    await AddPost.next()
    await message.answer("–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.\n"
                         "–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - "
                         "–∂–¥–µ–º –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üòä\n"
                         "–ê –µ—Å–ª–∏ –Ω–µ—Ç - –∫–Ω–æ–ø–æ—á–∫–∞ –≤–Ω–∏–∑—É...",
                         reply_markup=cancel_kb)


@dp.message_handler(state=AddPost.photo_editing)
async def add_photo_processing(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["add_post"].photo_editing = message.text.strip() or None
    await message.delete()
    await AddPost.next()
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ—Å—Ç–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Å–∏–π –∫–∞–¥—Ä?",
                         reply_markup=cancel_kb)


@dp.message_handler(state=AddPost.place)
async def add_place(message: Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy["add_post"].place = message.text.strip()
        post = proxy["add_post"]
    await message.delete()
    if not message.text.strip():
        await message.answer("–ù—É –Ω–µ–µ–µ—Ç, –≥–æ—Ä–æ–¥ —É–∂–µ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å üò¢",
                             reply_markup=cancel_kb)
    else:
        await AddPost.next()
        caption = f"{post.device} | {post.photo_editing}\n" \
                  f"Place - {post.place}"
        conf_1_m = await message.answer("–û—Ç–ª–∏—á–Ω–æ. –ü–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:")
        conf_2_m = await message.answer_photo(photo=post.image_id,
                                              caption=caption)
        conf_3_m = await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º?",
                                        reply_markup=confirm_kb)
        async with state.proxy() as proxy:
            proxy["confirm_messages"] = [conf_1_m, conf_2_m, conf_3_m]


@dp.message_handler(Text(contains="–î–∞"), state=AddPost.confirm)
@dp.message_handler(Text(contains="–ù–µ—Ç"), state=AddPost.confirm)
async def confirm(message: Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as proxy:
        for message in proxy["confirm_messages"]:
            await message.delete()
        post: PostSchema = proxy["add_post"]

    if not ~message.text.find("–î–∞"):
        text = "–ü–æ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
        QueuePost.add_post(post)
        await main_menu(message=message, state=state, text=text + "\n–ß—Ç–æ –Ω–∏–±—É–¥—å –µ—â–µ?")

    elif not ~message.text.find("–ù–µ—Ç"):
        text = "–û—Ç–º–µ–Ω—è–µ–º..."
        temp_message = await main_menu(message=message, state=state, text=text)
        temp_message.delete()
